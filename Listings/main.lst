C51 COMPILER V9.60.7.0   MAIN                                                              01/21/2024 00:24:22 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files\keil\C51\BIN\C51.EXE main.c LARGE ROM(COMPACT) WARNINGLEVEL(0) OPTIMIZE(9,SIZE) BR
                    -OWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "dht11.h"
   3          #include "oled.h"
   4          #include "bmp.h"
   5          #include "DS1302.h"
   6          #include "display.h"
   7          sbit BEEP = P2 ^ 7;
   8          sbit key_menu = P0^5;
   9          sfr ISP_DOWNS=0Xe7;
  10          sbit ISP_SW=P3^0;
  11          char menu = 0;//Ê†áÂøóÂèòÈáè
  12          unsigned char time_data[6]={0};//ËØªÂèñDS1302ÂΩìÂâçÊó∂Èó¥ÁºìÂ≠òÁü©Èòµ
  13          unsigned char bell_data[3]={12,0,0};//ÈóπÈìÉËÆæÁΩÆÁïåÈù¢
  14          unsigned char wenshi_du_data[2]={70,40};//ÈóπÈìÉËÆæÁΩÆÁïåÈù¢
  15          unsigned char bell_flag=0;//ÈóπÈìÉÂäüËÉΩÂºÄÂÖ≥
  16          unsigned char du_flag=0;//ÈóπÈìÉÂäüËÉΩÂºÄÂÖ≥
  17          unsigned char bell_onoff=0;//ÈóπÈìÉÂºÄÂÖ≥
  18          unsigned char set_run=0;//ÊåâÈîÆrunÁä∂ÊÄÅÊ†áËØÜÁ¨¶
  19          unsigned char set_bell=0;//ÊåâÈîÆbellÁä∂ÊÄÅÊ†áËØÜÁ¨¶
  20          unsigned char set_shift=0;//Ë∞ÉÊó∂‰ΩçÁΩÆÊ†áËØÜÁ¨¶
  21          unsigned char set_shift_bell=0;//bellË∞ÉÊó∂‰ΩçÁΩÆÊ†áËØÜÁ¨¶
  22          unsigned char set_shift_du=0;//duË∞ÉÊó∂‰ΩçÁΩÆÊ†áËØÜÁ¨¶
  23          
  24          void show_time(unsigned char show_data[6])
  25          {
  26   1      
  27   1        OLED_ShowChar(24, 0, show_data[0]/10+'0',16);//Âπ¥  
  28   1        OLED_ShowChar(32, 0, show_data[0]%10+'0',16);
  29   1        
  30   1        OLED_ShowChar(56, 0, show_data[1]/10+'0',16);//Êúà
  31   1        OLED_ShowChar(64, 0, show_data[1]%10+'0',16);
  32   1        
  33   1        OLED_ShowChar(88, 0, show_data[2]/10+'0',16);//Êó•
  34   1        OLED_ShowChar(96, 0, show_data[2]%10+'0',16);
  35   1        
  36   1        OLED_ShowChar(20, 3, show_data[3]/10+'0',16);//Êó∂
  37   1        OLED_ShowChar(28, 3, show_data[3]%10+'0',16);
  38   1          
  39   1        OLED_ShowChar(40, 3, ':');
  40   1          
  41   1        OLED_ShowChar(56, 3, show_data[4]/10+'0',16);//ÂàÜ
  42   1        OLED_ShowChar(64, 3, show_data[4]%10+'0',16);
  43   1              
  44   1        OLED_ShowChar(76, 3, ':');
  45   1          
  46   1        OLED_ShowChar(92, 3, show_data[5]/10+'0',16);//Áßí
  47   1        OLED_ShowChar(100, 3, show_data[5]%10+'0',16);  
  48   1        dht_11_receive();//Êé•Êî∂Êï∞ÊçÆ 
  49   1      
  50   1        OLED_ShowNum(14,6,TH,3,16);//ÊòæÁ§∫Ê∏©Â∫¶
  51   1        OLED_ShowNum(70,6,RH,3,16);//ÊòæÁ§∫ÊπøÂ∫¶
  52   1      }
  53          
  54          
C51 COMPILER V9.60.7.0   MAIN                                                              01/21/2024 00:24:22 PAGE 2   

  55          void Time_Date()
  56          {
  57   1        /*ÊåâÈîÆÈÄªËæë*/
  58   1        switch(KEY_Scan())
  59   1        {
  60   2          case 1: //Êåâ‰∏ãrunÈîÆ
  61   2          set_run=1;
  62   2          //ËØªÂèñÂΩìÂâçÊó∂Èó¥Âπ∂ÊòæÁ§∫
  63   2          DS1302_Readtime();
  64   2          show_time(time_data);
  65   2          while(set_run)
  66   2          {
  67   3            //ÂØπÂ∫îËÆæÁΩÆ‰ΩçÈó™ÁÉÅ
  68   3            display(time_data[5-set_shift],0,set_shift);
  69   3            display(time_data[5-set_shift],1,set_shift);
  70   3      
  71   3            switch(KEY_Scan())
  72   3            {
  73   4              case 1: DS1302_SetTime(time_data);set_run = 0; break;//Á¨¨‰∫åÊ¨°Êåâ‰∏ãrunÈîÆ‰øùÂ≠òÊó∂Èó¥Âπ∂ÈÄÄÂá∫ËÆæÁΩ
             -Æ
  74   4              case 2: if(set_shift++>4)set_shift=0;break;//Áßª‰Ωç
  75   4              case 3: break;
  76   4              case 4: time_data[5-set_shift]++;break;//up
  77   4              case 5: time_data[5-set_shift]--;break;//down
  78   4              default : break;
  79   4            }
  80   3          }break;
  81   2          case 2: bell_onoff=0;BEEP=1; break;//ÂÖ≥Èó≠ÈóπÈìÉ
  82   2          case 3: if(set_bell++>2)set_bell=0;//Êåâ‰∏ãÈóπÈìÉËÆæÁΩÆÈîÆ
  83   2          //ËØªÂèñÂΩìÂâçËÆæÂÆöÊó∂Èó¥Âπ∂ÊòæÁ§∫
  84   2          display_hour(bell_data[0],1);
  85   2          display_min(bell_data[1],1);
  86   2          display_sec(bell_data[2],1);
  87   2          display_tmp(wenshi_du_data[1],1);
  88   2          display_shidu(wenshi_du_data[0],1);
  89   2          while(set_bell==1)
  90   2          {
  91   3            //ÂØπÂ∫îËÆæÁΩÆ‰ΩçÈó™ÁÉÅ
  92   3            display(bell_data[2-set_shift_bell],0,set_shift_bell);
  93   3            display(bell_data[2-set_shift_bell],1,set_shift_bell);
  94   3            switch(KEY_Scan())
  95   3            {
  96   4              case 1: bell_flag=!bell_flag;show_bell(bell_flag);break;//ÂºÄÂêØÊàñÂÖ≥Èó≠ÈóπÈíü‰ΩøËÉΩ
  97   4              case 2: if(set_shift_bell++>1)set_shift_bell=0;break;//ÁßªÂä®Ë∞ÉÊï¥‰ΩçÁΩÆ
  98   4              case 3: if(set_bell++>2)set_bell=0;break;//ÂàáÊç¢Êó∂Èó¥ËÆæÁΩÆ
  99   4              case 4: bell_data[2-set_shift_bell]++;break;//up
 100   4              case 5: bell_data[2-set_shift_bell]--;break;//down
 101   4              default : break;
 102   4            }
 103   3          }
 104   2          while(set_bell==2)
 105   2          {
 106   3            //ÂØπÂ∫îËÆæÁΩÆ‰ΩçÈó™ÁÉÅ
 107   3            display2(wenshi_du_data[1-set_shift_du],0,set_shift_du);
 108   3            display2(wenshi_du_data[1-set_shift_du],1,set_shift_du);
 109   3            switch(KEY_Scan())
 110   3            {
 111   4              case 1: du_flag=!du_flag;show_du(du_flag);break;//ÂºÄÂêØÊàñÂÖ≥Èó≠ÈóπÈíü‰ΩøËÉΩ
 112   4              case 2: if(set_shift_du++>0)set_shift_du=0;break;//ÁßªÂä®Ë∞ÉÊï¥‰ΩçÁΩÆ
 113   4              case 3: set_bell=0;break;//ÈÄÄÂá∫Êó∂Èó¥ËÆæÁΩÆ
 114   4              case 4: wenshi_du_data[1-set_shift_du]++;break;//up
 115   4              case 5: wenshi_du_data[1-set_shift_du]--;break;//down
C51 COMPILER V9.60.7.0   MAIN                                                              01/21/2024 00:24:22 PAGE 3   

 116   4              default : break;
 117   4            }
 118   3          }
 119   2          break;
 120   2          case 4: break;
 121   2          case 5: break;
 122   2          default : break;
 123   2        };
 124   1      
 125   1        DS1302_Readtime();
 126   1        show_time(time_data);
 127   1      
 128   1        if(bell_data[0]==time_data[3] && bell_data[1]==time_data[4] && bell_data[2]==time_data[5])//Ëß¶ÂèëÈóπÈìÉ
 129   1        {
 130   2          bell_onoff=1;
 131   2        }
 132   1        if(TH>=wenshi_du_data[1] || RH>=wenshi_du_data[0])//Ëß¶ÂèëÈóπÈìÉ
 133   1        {
 134   2          bell_onoff=1;
 135   2        }
 136   1        if(bell_flag && bell_onoff)
 137   1        {
 138   2          BEEP=!BEEP;
 139   2        }
 140   1        if(du_flag && bell_onoff)
 141   1        {
 142   2          BEEP=!BEEP;
 143   2        }
 144   1      }
 145          
 146          void Timer0_Isr(void) interrupt 1
 147          {
 148   1          TH0 = (65536-1000)/256;
 149   1          TL0 = (65536-1000)%256;
 150   1      
 151   1          if(!ISP_SW)ISP_DOWNS=0x60;
 152   1      }
 153          
 154          void Timer0_Init(void)
 155          {
 156   1        TMOD = 0x01;
 157   1        TH0 = (65536-1000)/256;
 158   1        TL0 = (65536-1000)%256;
 159   1        ET0 = 1;
 160   1        TR0 = 1;
 161   1        EA = 1;
 162   1      }
 163          int main(void)
 164          {
 165   1        delay_ms(50);
 166   1        Timer0_Init();
 167   1        OLED_Init();
 168   1        OLED_Clear();
 169   1        ds1302_init();
 170   1        while(1)
 171   1        {
 172   2          if(key_menu == 0)//downÈîÆÊåâ‰∏ã
 173   2          { 
 174   3            while(key_menu==0);//Á≠âÂæÖÊåâÈîÆÊùæÂºÄ
 175   3            delay_ms(5);//Âª∂Êó∂Ê∂àÊäñ
 176   3            OLED_Clear();
 177   3            menu++;
C51 COMPILER V9.60.7.0   MAIN                                                              01/21/2024 00:24:22 PAGE 4   

 178   3            if(menu>2)menu=0;
 179   3          }
 180   2      
 181   2          if(menu==0)
 182   2          {
 183   3            OLED_ShowChar(8, 0, 2+'0',16);//Âπ¥ 
 184   3            OLED_ShowChar(16, 0, 0+'0',16);
 185   3            OLED_ShowCHinese(40,0,0);//Âπ¥
 186   3            OLED_ShowCHinese(72,0,1);//Êúà
 187   3            OLED_ShowCHinese(104,0,2);//Êó•
 188   3            
 189   3            OLED_ShowCHinese(0,6,3);//Ê∏©
 190   3            OLED_ShowChar(40,6, '+',16);
 191   3            
 192   3            OLED_ShowCHinese(56,6,4);//Êπø
 193   3            OLED_ShowChar(94, 6, '%',16);
 194   3            Time_Date();
 195   3          }
 196   2          if(menu==1)
 197   2          {
 198   3            OLED_DrawBMP(0,0,128,8,BMP1);  //ÂõæÁâáÊòæÁ§∫(ÂõæÁâáÊòæÁ§∫ÊÖéÁî®ÔºåÁîüÊàêÁöÑÂ≠óË°®ËæÉÂ§ßÔºå‰ºöÂç†Áî®ËæÉ
             -Â§öÁ©∫Èó¥ÔºåFLASHÁ©∫Èó¥8K‰ª•‰∏ãÊÖéÁî®)
 199   3          }
 200   2        }
 201   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1171    ----
   CONSTANT SIZE    =   1024    ----
   XDATA SIZE       =     20       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
